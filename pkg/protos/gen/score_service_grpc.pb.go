// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: score_service.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScoreService_GetAggregatedCategoryScores_FullMethodName    = "/score_service.ScoreService/GetAggregatedCategoryScores"
	ScoreService_GetScoresByTicket_FullMethodName              = "/score_service.ScoreService/GetScoresByTicket"
	ScoreService_GetOverallQualityScore_FullMethodName         = "/score_service.ScoreService/GetOverallQualityScore"
	ScoreService_GetPeriodOverPeriodScoreChange_FullMethodName = "/score_service.ScoreService/GetPeriodOverPeriodScoreChange"
)

// ScoreServiceClient is the client API for ScoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoreServiceClient interface {
	// Aggregated Category Scores Over a Period of Time
	GetAggregatedCategoryScores(ctx context.Context, in *AggregatedCategoryScoreRequest, opts ...grpc.CallOption) (*AggregatedCategoryScoresResponse, error)
	// Scores by Ticket
	GetScoresByTicket(ctx context.Context, in *ScoresByTicketRequest, opts ...grpc.CallOption) (*ScoresByTicketResponse, error)
	// Overall Quality Score
	GetOverallQualityScore(ctx context.Context, in *OverallQualityScoreRequest, opts ...grpc.CallOption) (*OverallQualityScoreResponse, error)
	// Period Over Period Score Change
	GetPeriodOverPeriodScoreChange(ctx context.Context, in *PeriodOverPeriodScoreChangeRequest, opts ...grpc.CallOption) (*PeriodOverPeriodScoreChangeResponse, error)
}

type scoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScoreServiceClient(cc grpc.ClientConnInterface) ScoreServiceClient {
	return &scoreServiceClient{cc}
}

func (c *scoreServiceClient) GetAggregatedCategoryScores(ctx context.Context, in *AggregatedCategoryScoreRequest, opts ...grpc.CallOption) (*AggregatedCategoryScoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AggregatedCategoryScoresResponse)
	err := c.cc.Invoke(ctx, ScoreService_GetAggregatedCategoryScores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreServiceClient) GetScoresByTicket(ctx context.Context, in *ScoresByTicketRequest, opts ...grpc.CallOption) (*ScoresByTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScoresByTicketResponse)
	err := c.cc.Invoke(ctx, ScoreService_GetScoresByTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreServiceClient) GetOverallQualityScore(ctx context.Context, in *OverallQualityScoreRequest, opts ...grpc.CallOption) (*OverallQualityScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OverallQualityScoreResponse)
	err := c.cc.Invoke(ctx, ScoreService_GetOverallQualityScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreServiceClient) GetPeriodOverPeriodScoreChange(ctx context.Context, in *PeriodOverPeriodScoreChangeRequest, opts ...grpc.CallOption) (*PeriodOverPeriodScoreChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeriodOverPeriodScoreChangeResponse)
	err := c.cc.Invoke(ctx, ScoreService_GetPeriodOverPeriodScoreChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoreServiceServer is the server API for ScoreService service.
// All implementations must embed UnimplementedScoreServiceServer
// for forward compatibility.
type ScoreServiceServer interface {
	// Aggregated Category Scores Over a Period of Time
	GetAggregatedCategoryScores(context.Context, *AggregatedCategoryScoreRequest) (*AggregatedCategoryScoresResponse, error)
	// Scores by Ticket
	GetScoresByTicket(context.Context, *ScoresByTicketRequest) (*ScoresByTicketResponse, error)
	// Overall Quality Score
	GetOverallQualityScore(context.Context, *OverallQualityScoreRequest) (*OverallQualityScoreResponse, error)
	// Period Over Period Score Change
	GetPeriodOverPeriodScoreChange(context.Context, *PeriodOverPeriodScoreChangeRequest) (*PeriodOverPeriodScoreChangeResponse, error)
	mustEmbedUnimplementedScoreServiceServer()
}

// UnimplementedScoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScoreServiceServer struct{}

func (UnimplementedScoreServiceServer) GetAggregatedCategoryScores(context.Context, *AggregatedCategoryScoreRequest) (*AggregatedCategoryScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregatedCategoryScores not implemented")
}
func (UnimplementedScoreServiceServer) GetScoresByTicket(context.Context, *ScoresByTicketRequest) (*ScoresByTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScoresByTicket not implemented")
}
func (UnimplementedScoreServiceServer) GetOverallQualityScore(context.Context, *OverallQualityScoreRequest) (*OverallQualityScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverallQualityScore not implemented")
}
func (UnimplementedScoreServiceServer) GetPeriodOverPeriodScoreChange(context.Context, *PeriodOverPeriodScoreChangeRequest) (*PeriodOverPeriodScoreChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeriodOverPeriodScoreChange not implemented")
}
func (UnimplementedScoreServiceServer) mustEmbedUnimplementedScoreServiceServer() {}
func (UnimplementedScoreServiceServer) testEmbeddedByValue()                      {}

// UnsafeScoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoreServiceServer will
// result in compilation errors.
type UnsafeScoreServiceServer interface {
	mustEmbedUnimplementedScoreServiceServer()
}

func RegisterScoreServiceServer(s grpc.ServiceRegistrar, srv ScoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedScoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScoreService_ServiceDesc, srv)
}

func _ScoreService_GetAggregatedCategoryScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatedCategoryScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).GetAggregatedCategoryScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreService_GetAggregatedCategoryScores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).GetAggregatedCategoryScores(ctx, req.(*AggregatedCategoryScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreService_GetScoresByTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoresByTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).GetScoresByTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreService_GetScoresByTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).GetScoresByTicket(ctx, req.(*ScoresByTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreService_GetOverallQualityScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverallQualityScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).GetOverallQualityScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreService_GetOverallQualityScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).GetOverallQualityScore(ctx, req.(*OverallQualityScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreService_GetPeriodOverPeriodScoreChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodOverPeriodScoreChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).GetPeriodOverPeriodScoreChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreService_GetPeriodOverPeriodScoreChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).GetPeriodOverPeriodScoreChange(ctx, req.(*PeriodOverPeriodScoreChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScoreService_ServiceDesc is the grpc.ServiceDesc for ScoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "score_service.ScoreService",
	HandlerType: (*ScoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAggregatedCategoryScores",
			Handler:    _ScoreService_GetAggregatedCategoryScores_Handler,
		},
		{
			MethodName: "GetScoresByTicket",
			Handler:    _ScoreService_GetScoresByTicket_Handler,
		},
		{
			MethodName: "GetOverallQualityScore",
			Handler:    _ScoreService_GetOverallQualityScore_Handler,
		},
		{
			MethodName: "GetPeriodOverPeriodScoreChange",
			Handler:    _ScoreService_GetPeriodOverPeriodScoreChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "score_service.proto",
}
