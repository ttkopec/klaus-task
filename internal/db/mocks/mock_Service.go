// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/ttkopec/klaus-task/internal/models"

	time "time"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// GetAggregatedCategoryScores provides a mock function with given fields: ctx, start, end
func (_m *MockService) GetAggregatedCategoryScores(ctx context.Context, start time.Time, end time.Time) ([]models.CategoryScorePerPeriod, error) {
	ret := _m.Called(ctx, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetAggregatedCategoryScores")
	}

	var r0 []models.CategoryScorePerPeriod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]models.CategoryScorePerPeriod, error)); ok {
		return rf(ctx, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []models.CategoryScorePerPeriod); ok {
		r0 = rf(ctx, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.CategoryScorePerPeriod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetAggregatedCategoryScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAggregatedCategoryScores'
type MockService_GetAggregatedCategoryScores_Call struct {
	*mock.Call
}

// GetAggregatedCategoryScores is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
func (_e *MockService_Expecter) GetAggregatedCategoryScores(ctx interface{}, start interface{}, end interface{}) *MockService_GetAggregatedCategoryScores_Call {
	return &MockService_GetAggregatedCategoryScores_Call{Call: _e.mock.On("GetAggregatedCategoryScores", ctx, start, end)}
}

func (_c *MockService_GetAggregatedCategoryScores_Call) Run(run func(ctx context.Context, start time.Time, end time.Time)) *MockService_GetAggregatedCategoryScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time))
	})
	return _c
}

func (_c *MockService_GetAggregatedCategoryScores_Call) Return(_a0 []models.CategoryScorePerPeriod, _a1 error) *MockService_GetAggregatedCategoryScores_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetAggregatedCategoryScores_Call) RunAndReturn(run func(context.Context, time.Time, time.Time) ([]models.CategoryScorePerPeriod, error)) *MockService_GetAggregatedCategoryScores_Call {
	_c.Call.Return(run)
	return _c
}

// GetOverallQualityScore provides a mock function with given fields: ctx, start, end
func (_m *MockService) GetOverallQualityScore(ctx context.Context, start time.Time, end time.Time) (*models.OverallQualityScore, error) {
	ret := _m.Called(ctx, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetOverallQualityScore")
	}

	var r0 *models.OverallQualityScore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) (*models.OverallQualityScore, error)); ok {
		return rf(ctx, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) *models.OverallQualityScore); ok {
		r0 = rf(ctx, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OverallQualityScore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetOverallQualityScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOverallQualityScore'
type MockService_GetOverallQualityScore_Call struct {
	*mock.Call
}

// GetOverallQualityScore is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
func (_e *MockService_Expecter) GetOverallQualityScore(ctx interface{}, start interface{}, end interface{}) *MockService_GetOverallQualityScore_Call {
	return &MockService_GetOverallQualityScore_Call{Call: _e.mock.On("GetOverallQualityScore", ctx, start, end)}
}

func (_c *MockService_GetOverallQualityScore_Call) Run(run func(ctx context.Context, start time.Time, end time.Time)) *MockService_GetOverallQualityScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time))
	})
	return _c
}

func (_c *MockService_GetOverallQualityScore_Call) Return(_a0 *models.OverallQualityScore, _a1 error) *MockService_GetOverallQualityScore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetOverallQualityScore_Call) RunAndReturn(run func(context.Context, time.Time, time.Time) (*models.OverallQualityScore, error)) *MockService_GetOverallQualityScore_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeriodOverPeriodScoreChange provides a mock function with given fields: ctx, start1, end1, start2, end2
func (_m *MockService) GetPeriodOverPeriodScoreChange(ctx context.Context, start1 time.Time, end1 time.Time, start2 time.Time, end2 time.Time) (*models.ScoreChange, error) {
	ret := _m.Called(ctx, start1, end1, start2, end2)

	if len(ret) == 0 {
		panic("no return value specified for GetPeriodOverPeriodScoreChange")
	}

	var r0 *models.ScoreChange
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, time.Time, time.Time) (*models.ScoreChange, error)); ok {
		return rf(ctx, start1, end1, start2, end2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, time.Time, time.Time) *models.ScoreChange); ok {
		r0 = rf(ctx, start1, end1, start2, end2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ScoreChange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time, time.Time, time.Time) error); ok {
		r1 = rf(ctx, start1, end1, start2, end2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetPeriodOverPeriodScoreChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeriodOverPeriodScoreChange'
type MockService_GetPeriodOverPeriodScoreChange_Call struct {
	*mock.Call
}

// GetPeriodOverPeriodScoreChange is a helper method to define mock.On call
//   - ctx context.Context
//   - start1 time.Time
//   - end1 time.Time
//   - start2 time.Time
//   - end2 time.Time
func (_e *MockService_Expecter) GetPeriodOverPeriodScoreChange(ctx interface{}, start1 interface{}, end1 interface{}, start2 interface{}, end2 interface{}) *MockService_GetPeriodOverPeriodScoreChange_Call {
	return &MockService_GetPeriodOverPeriodScoreChange_Call{Call: _e.mock.On("GetPeriodOverPeriodScoreChange", ctx, start1, end1, start2, end2)}
}

func (_c *MockService_GetPeriodOverPeriodScoreChange_Call) Run(run func(ctx context.Context, start1 time.Time, end1 time.Time, start2 time.Time, end2 time.Time)) *MockService_GetPeriodOverPeriodScoreChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), args[3].(time.Time), args[4].(time.Time))
	})
	return _c
}

func (_c *MockService_GetPeriodOverPeriodScoreChange_Call) Return(_a0 *models.ScoreChange, _a1 error) *MockService_GetPeriodOverPeriodScoreChange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetPeriodOverPeriodScoreChange_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, time.Time, time.Time) (*models.ScoreChange, error)) *MockService_GetPeriodOverPeriodScoreChange_Call {
	_c.Call.Return(run)
	return _c
}

// GetScoresByTicket provides a mock function with given fields: ctx, start, end
func (_m *MockService) GetScoresByTicket(ctx context.Context, start time.Time, end time.Time) ([]models.ScoreByTicket, error) {
	ret := _m.Called(ctx, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetScoresByTicket")
	}

	var r0 []models.ScoreByTicket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]models.ScoreByTicket, error)); ok {
		return rf(ctx, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []models.ScoreByTicket); ok {
		r0 = rf(ctx, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ScoreByTicket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetScoresByTicket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScoresByTicket'
type MockService_GetScoresByTicket_Call struct {
	*mock.Call
}

// GetScoresByTicket is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
func (_e *MockService_Expecter) GetScoresByTicket(ctx interface{}, start interface{}, end interface{}) *MockService_GetScoresByTicket_Call {
	return &MockService_GetScoresByTicket_Call{Call: _e.mock.On("GetScoresByTicket", ctx, start, end)}
}

func (_c *MockService_GetScoresByTicket_Call) Run(run func(ctx context.Context, start time.Time, end time.Time)) *MockService_GetScoresByTicket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time))
	})
	return _c
}

func (_c *MockService_GetScoresByTicket_Call) Return(_a0 []models.ScoreByTicket, _a1 error) *MockService_GetScoresByTicket_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetScoresByTicket_Call) RunAndReturn(run func(context.Context, time.Time, time.Time) ([]models.ScoreByTicket, error)) *MockService_GetScoresByTicket_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
